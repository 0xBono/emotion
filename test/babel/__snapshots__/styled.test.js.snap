// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel styled component extract based on props 1`] = `
"import './styled.test.emotion.css';
const H1 = styled('h1', ['css-H1-1kwokni'], [fontSize + 'px', props => props.translateX]);"
`;

exports[`babel styled component extract based on props 2`] = `
".css-H1-1kwokni { font-size: var(--css-H1-1kwokni-0);
        height: 20px;
        -webkit-transform: translateX(var(--css-H1-1kwokni-1));
        -ms-transform: translateX(var(--css-H1-1kwokni-1));
        transform: translateX(var(--css-H1-1kwokni-1)); }"
`;

exports[`babel styled component extract basic 1`] = `
"import './styled.test.emotion.css';
const H1 = styled('h1', ['css-H1-1mh2el5'], [fontSize + 'px']);"
`;

exports[`babel styled component extract basic 2`] = `".css-H1-1mh2el5 { font-size: var(--css-H1-1mh2el5-0); height: 20px }"`;

exports[`babel styled component extract composes 1`] = `
"import './styled.test.emotion.css';
const cls1 = \`\${'css-cls1-1ltut9y'}\`;
const H1 = styled('h1', ['css-H1-13ogl0z', cls1], [fontSize + 'px', props => props.translateX]);"
`;

exports[`babel styled component extract composes 2`] = `
".css-cls1-1ltut9y { width: 20px; }
.css-H1-13ogl0z {
        font-size: var(--css-H1-13ogl0z-0);
        height: 20px;
        -webkit-transform: translateX(var(--css-H1-13ogl0z-1));
        -ms-transform: translateX(var(--css-H1-13ogl0z-1));
        transform: translateX(var(--css-H1-13ogl0z-1)); }"
`;

exports[`babel styled component extract no dynamic 1`] = `
"import \\"./styled.test.emotion.css\\";
styled(\\"h1\\", [\\"css-14ksm7b\\"], []);"
`;

exports[`babel styled component extract no dynamic 2`] = `".css-14ksm7b { color: blue; }"`;

exports[`babel styled component extract no use 1`] = `"\\"h1\\";"`;

exports[`babel styled component inline basic 1`] = `
"const H1 = styled('h1', [], [fontSize + 'px'], function createEmotionStyledRules(x0) {
  return [{
    'fontSize': x0
  }];
});"
`;

exports[`babel styled component inline composes based on props 1`] = `
"const cls1 = css([], [], function createEmotionStyledRules() {
  return [{
    'width': '20px'
  }];
});
const H1 = styled('h1', [props => {
  return props.a ? cssA : cssB;
}], [fontSize + 'px', props => props.translateX], function createEmotionStyledRules(x0, x1) {
  return [{
    'fontSize': x0,
    'height': '20px',
    'transform': \`translateX(\${x1})\`,
    'WebkitTransform': \`translateX(\${x1})\`
  }];
});"
`;

exports[`babel styled component inline function call 1`] = `
"styled(MyComponent, [], [fontSize + 'px'], function createEmotionStyledRules(x0) {
  return [{
    'fontSize': x0
  }];
});"
`;

exports[`babel styled component inline interpolation in different places 1`] = `
"
const H1 = styled('h1', [], [fontSize + 'px', props => props.translateX, something, something, props => props.translateX, props => props.translateX, props => props.translateX, props => props.translateX, props => props.translateX, props => props.translateX], function createEmotionStyledRules(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) {
  return [{
    'fontSize': x0,
    'height': '20px',
    'transform': [\`translateX(\${x1})\`, \`translateX(\${x4}) translateY(\${x5})\`],
    'height1': \`\${x2}wow\`,
    'width': \`w\${x3}ow\`,
    'transform1': \`translateX(\${x6}) translateY(\${x7})\`,
    'transform2': \`translateX(\${x8}) translateY(\${x9}\`
  }];
});"
`;

exports[`babel styled component inline media query 1`] = `
"const H1 = styled(\\"h1\\", [], [], function createEmotionStyledRules() {
  return [{
    \\"@media print\\": {
      \\"fontSize\\": \\"10pt\\"
    },
    \\"@media screen\\": {
      \\".child-selector\\": {
        \\"fontSize\\": \\"13px\\"
      }
    },
    \\"@media screen, print\\": {
      \\"&:hover + &\\": {
        \\"lineHeight\\": \\"1.2\\"
      }
    },
    \\"@media only screen   and (min-device-width: 320px)   and (max-device-width: 480px)  and (-webkit-min-device-pixel-ratio: 2)\\": {
      \\".child-selector\\": {
        \\"lineHeight\\": \\"1.4\\"
      }
    }
  }];
});"
`;

exports[`babel styled component inline name is correct with no identifier 1`] = `
"
css([], [], function createEmotionStyledRules() {
        return [{
                \\"margin\\": \\"12px 48px\\",
                \\"color\\": \\"#ffffff\\"
        }];
});"
`;

exports[`babel styled component inline no dynamic 1`] = `
"styled(\\"h1\\", [], [], function createEmotionStyledRules() {
  return [{
    \\"color\\": \\"blue\\"
  }];
});"
`;

exports[`babel styled component inline no use 1`] = `
"styled(\\"h1\\", [], [], function createEmotionStyledRules() {
  return [{}];
});"
`;

exports[`babel styled component inline object composes with classes 1`] = `
"
const H1 = styled('h1', ['some-class', props => ({
  display: props.display
})]);"
`;

exports[`babel styled component inline objects based on props 1`] = `
"
const H1 = styled('h1', [{
  padding: '10px'
}, props => ({
  display: props.display
})]);"
`;

exports[`babel styled component inline objects fn call 1`] = `
"
const H1 = styled('h1', [{
  display: ['-webkit-box', '-ms-flexbox', 'flex']
}]);"
`;

exports[`babel styled component inline objects prefixed 1`] = `
"
const H1 = styled('h1', [{
  borderRadius: '50%',
  WebkitTransition: '-webkit-transform 400ms ease-in-out',
  transition: ['-webkit-transform 400ms ease-in-out', 'transform 400ms ease-in-out', 'transform 400ms ease-in-out, -webkit-transform 400ms ease-in-out'],
  WebkitBoxSizing: 'border-box',
  boxSizing: 'border-box',
  display: ['-webkit-box', '-ms-flexbox', 'flex'],
  ':hover': {
    WebkitTransform: 'scale(1.2)',
    transform: 'scale(1.2)'
  }
}, props => {
  padding: props.padding;
}]);"
`;

exports[`babel styled component inline styled component as selector 1`] = `
"
const SomeComponent = styled(\\"div\\", [], [], function createEmotionStyledRules() {
  return [{}];
});
styled(\\"h1\\", [], [SomeComponent], function createEmotionStyledRules(x0) {
  return [{
    \\"color\\": \\"blue\\",
    [\`.\${x0}\`]: {
      \\"color\\": \\"green\\"
    }
  }];
});"
`;

exports[`babel styled component inline styled objects prefixed 1`] = `
"
const H1 = styled('h1', [{
  borderRadius: '50%',
  WebkitTransition: '-webkit-transform 400ms ease-in-out',
  transition: ['-webkit-transform 400ms ease-in-out', 'transform 400ms ease-in-out', 'transform 400ms ease-in-out, -webkit-transform 400ms ease-in-out'],
  WebkitBoxSizing: 'border-box',
  boxSizing: 'border-box',
  display: ['-webkit-box', '-ms-flexbox', 'flex'],
  ':hover': {
    WebkitTransform: 'scale(1.2)',
    transform: 'scale(1.2)'
  }
}, props => ({
  display: props.display
})]);"
`;

exports[`babel styled component inline styled. objects 1`] = `
"
const H1 = styled(\\"h1\\", [{
  padding: \\"10px\\"
}, props => ({
  display: props.display
})]);"
`;
