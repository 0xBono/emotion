import { sheet, inserted } from './index'

/** ** serverside stuff ****/

// the api's copied from aphrodite, with 1 key difference
// we include *all* the css generated by the app
// to optimize to only include generated styles on the pages
// use renderStaticOptimized
export function renderStatic (fn) {
  let html = fn()
  if (html === undefined) {
    throw new Error('did you forget to return from renderToString?')
  }
  let rules = sheet.sheet.cssRules
  let css = rules.map(r => r.cssText).join('')
  return { html, ids: Object.keys(inserted), css, rules }
}

export function renderStaticOptimized (fn) {
  // parse out ids from html
  // reconstruct css/rules/cache to pass
  let html = fn()
  if (html === undefined) {
    throw new Error('did you forget to return from renderToString?')
  }
  let o = { html, ids: [], css: '', rules: [] }
  let regex = /css-([a-zA-Z0-9]+)/gm
  let match
  let ids = {}
  while ((match = regex.exec(html)) !== null) {
    if (!ids[match[1] + '']) {
      ids[match[1] + ''] = true
    }
  }

  o.rules = sheet.sheet.cssRules.filter(x => {
    let regex = /css-([a-zA-Z0-9]+)/gm
    let match = regex.exec(x.cssText)
    if (match && ids[match[1] + '']) {
      return true
    }
    if (!match) {
      return true
    }
    return false
  })
  o.ids = Object.keys(inserted).filter(id => !!ids[id + ''])
  o.css = o.rules.map(x => x.cssText).join('')

  return o
}
